name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
      with:
        version: "latest"
        
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version-file: '.python-version'

    - name: Cache uv dependencies
      uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
      
    - name: Install dependencies
      run: uv sync --dev
        
    - name: Type check with MyPy
      run: uv run mypy docker_compose_mcp/

  build:
    name: Build package
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
      with:
        version: "latest"
        
    - name: Set up Python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version-file: '.python-version'

    - name: Cache uv dependencies
      uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Build package
      run: uv build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: dist
        path: dist/

  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    
    services:
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@38f3f104447c67c051c4a08e39b64a148898af3a # v4
      with:
        version: "latest"
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache uv dependencies
      uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-
          ${{ runner.os }}-uv-
      
    - name: Install dependencies
      run: uv sync --dev
        
    - name: Run unit tests
      run: uv run pytest tests/test_docker_compose_manager.py -v
        
    - name: Run MCP integration tests (without Docker)
      run: uv run pytest tests/test_mcp_integration.py -v -k "not integration"
        
    - name: Run Docker integration tests
      run: uv run pytest tests/test_mcp_integration.py::TestRealDockerIntegration -v -m integration
        
    - name: Generate coverage report
      run: uv run pytest --cov=docker_compose_mcp --cov-report=xml --cov-report=term-missing
      if: matrix.python-version == '3.13'
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@b9fd7d16f6d7d1b5d4895344b0b74aa23c6c7156 # v4
      if: matrix.python-version == '3.13'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [lint, build, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: release
    permissions:
      id-token: write  # For trusted publishing
      contents: read
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1 # Latest release/v1