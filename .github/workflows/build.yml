name: Build

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]


jobs:
  lint:
    name: Lint and Security
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: '.python-version'
      
    - name: Install dependencies
      run: uv sync --dev
        
    - name: Run Ruff
      uses: chartboost/ruff-action@v1
      with:
        args: "check ."
        
    - name: Check Ruff formatting
      uses: chartboost/ruff-action@v1
      with:
        args: "format --check ."
        
    - name: Type check with MyPy
      run: uv run mypy docker_compose_mcp/
      
    - name: Run Bandit Security Scan
      uses: pypa/bandit-action@v1.0.2
      with:
        configfile: "pyproject.toml"
        path: "docker_compose_mcp"

  build:
    name: Build package
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: '.python-version'
      
    - name: Install dependencies
      run: uv sync --dev
      
    - name: Build package
      run: uv build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test:
    name: Test on Python
    runs-on: ubuntu-latest
    needs: build
    
    services:
      docker:
        options: --privileged
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: '.python-version'
      
    - name: Install dependencies
      run: uv sync --dev
        
    - name: Run unit tests
      run: uv run pytest tests/test_docker_compose_manager.py -v
        
    - name: Run MCP integration tests (without Docker)
      run: uv run pytest tests/test_mcp_integration.py -v -k "not integration"
        
    - name: Run Docker integration tests
      run: uv run pytest tests/test_mcp_integration.py::TestRealDockerIntegration -v -m integration
        
    - name: Generate coverage report
      run: uv run pytest --cov=docker_compose_mcp --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [lint, build, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: release
    permissions:
      id-token: write  # For trusted publishing
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1